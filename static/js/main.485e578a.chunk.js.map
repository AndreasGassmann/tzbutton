{"version":3,"sources":["logos/tzbutton-logo.svg","logos/beacon-logo.svg","logos/airgap-logo.svg","constants.ts","services/beacon-service.ts","components/Header/Header.tsx","components/HowTo/HowTo.tsx","components/Faq/Faq.tsx","components/Footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TZBUTTON_CONTRACT","CONTRIBUTION_AMOUNT_STRING","multiplier","BigNumber","shiftedBy","times","toFixed","Tezos","setProvider","rpc","connectToBeacon","a","wallet","BeaconWallet","name","setWalletProvider","network","type","NetworkType","CARTHAGENET","requestPermissions","participate","client","requestOperation","operationDetails","kind","amount","destination","withdraw","at","contract","methods","send","result","opHash","readStateFromContract","storage","contractStorage","console","log","lastUpdatedBlockHash","checkRecentBlockForUpdates","getBlock","block","newRelevantBlock","hash","operations","some","ops","contents","op","OpKind","TRANSACTION","openTezBlock","window","open","getPotAmount","tz","getBalance","toString","WinnerAnnouncement","onClick","colorScheme","size","refreshContractState","setState","contractState","startDate","Date","leadership_start_timestamp","leader","getTime","NUMBER_OF_BLOCKS_TO_WIN","loaded","potAmount","leaderStartTime","leaderEndTime","Header","useState","undefined","state","intervalRef","useRef","useEffect","current","setInterval","clearInterval","content","as","fontWeight","opacity","fontSize","mt","date","daysInHours","zeroPadTime","src","TzButtonSvg","width","my","mb","pt","pb","maxW","mx","textAlign","getLink","link","href","isExternal","beaconLink","taquitoLink","buttonRedditLink","HowTo","elements","title","description","bg","py","map","el","index","key","catImage","boxSize","airgapLink","tzButtonGithubLink","FAQs","Faq","allowToggle","faq","flex","data","code","icon","social","contact","Footer","colorMode","useColorMode","px","wrap","justify","w","item","_hover","textDecoration","variant","leftIcon","color","borderColor","AirGap","Beacon","App","theme","minH","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,opBCE9BC,EAA4B,uCAS5BC,EAA6B,WAA6B,IAA5BC,EAA2B,uDAAN,EAC9D,MAAM,GAAN,OAAU,IAAIC,YAT6B,UASIC,WAAW,GAAGC,MAAMH,GAAYI,UAA/E,YAPwB,QCC1BC,IAAMC,YAAY,CAAEC,IDGG,uCCDvB,IAAMC,EAAe,uCAAG,8BAAAC,EAAA,6DAEhBC,EAAS,IAAIC,IAAa,CAAEC,KAAM,aAGxCP,IAAMQ,kBAAkBH,GAGlBI,EAAU,CACdC,KAAMC,cAAYC,aATE,SAahBP,EAAOQ,mBAAmB,CAAEJ,YAbZ,gCAefJ,GAfe,2CAAH,qDAkBRS,EAAW,uCAAG,4BAAAV,EAAA,sEACJD,IADI,cACnBE,EADmB,gBAGnBA,EAAOU,OAAOC,iBAAiB,CACnCC,iBAAkB,CAChB,CACEC,KAAM,cACNC,OD9BqC,SC+BrCC,YAAa3B,MARM,2CAAH,qDAcX4B,EAAQ,uCAAG,8BAAAjB,EAAA,sEAChBD,IADgB,uBAKCH,IAAMK,OAAOiB,GAAG7B,GALjB,cAKhB8B,EALgB,gBAUDA,EAASC,QAAQH,SAAS,IAAII,OAV7B,cAUhBC,EAVgB,yBAafA,EAAOC,QAbQ,2CAAH,qDAgBRC,EAAqB,uCAAG,8BAAAxB,EAAA,sEACZJ,IAAMuB,SAASD,GAAG7B,GADN,cAC7B8B,EAD6B,gBAGAA,EAASM,UAHT,cAG7BC,EAH6B,OAKnCC,QAAQC,IAAIF,GALuB,kBAM5BA,GAN4B,2CAAH,qDAS9BG,EAA+B,GAEtBC,EAA0B,uCAAG,8BAAA9B,EAAA,6DACxC2B,QAAQC,IAAI,wBAD4B,SAEpBhC,IAAME,IAAIiC,WAFU,cAElCC,EAFkC,OAIlCC,EACJD,EAAME,OAASL,GACfG,EAAMG,WAAW,GAAGC,MAAK,SAACC,GAAD,OACvBA,EAAIC,SAASF,MAAK,SAACG,GAAD,OAAQA,EAAGzB,OAAS0B,IAAOC,aAAeF,EAAGvB,cAAgB3B,QAGnFwC,EAAuBG,EAAME,KAVW,kBAYjCD,GAZiC,2CAAH,qDAe1BS,EAAY,uCAAG,sBAAA1C,EAAA,sDAC1B2C,OAAOC,KAAP,kDAAuDvD,GAAqB,UADlD,2CAAH,qDAIZwD,EAAY,uCAAG,sBAAA7C,EAAA,sEACZJ,IAAMkD,GAAGC,WAAW1D,GADR,uCAC4BI,WAAW,GAAGuD,YAD1C,2CAAH,qD,kBCtEnBC,EAAqB,kBACzB,kDAEE,6BACA,kBAAC,IAAD,CAAQC,QAASjC,EAAUkC,YAAY,QAAQC,KAAK,MAApD,cAoBEC,EAAoB,uCAAG,WAAOC,GAAP,iBAAAtD,EAAA,6DAC3B2B,QAAQC,IAAI,cADe,SAECJ,IAFD,cAErB+B,EAFqB,OAGrBC,EAAY,IAAIC,KAAKF,EAAcG,4BAHd,KAI3BJ,EAJ2B,SAMRT,IANQ,wBAOjBU,EAAcI,OAPG,KAQRH,EARQ,KAbf,IAAIC,KAsBeD,EAtBJI,UAAYC,QAaZ,MAKzBC,QAAQ,EACRC,UANyB,KAOzBJ,OAPyB,KAQzBK,gBARyB,KASzBC,cATyB,iEAAH,sDA2FXC,EA9EU,WAAO,IAAD,EACHC,mBAAmB,CAC3CL,QAAQ,EACRC,UAAW,GACXJ,OAAQ,GACRK,qBAAiBI,EACjBH,mBAAeG,IANY,mBACtBC,EADsB,KACff,EADe,KASvBgB,EAAcC,mBAEpBC,qBAAU,WAUR,OATA7C,QAAQC,IAAI,uBAEZyB,EAAqBC,GACrBgB,EAAYG,QAAUC,YAAW,sBAAC,sBAAA1E,EAAA,sEACP8B,IADO,eAG9BuB,EAAqBC,GAHS,2CAK/B,KACI,WACL3B,QAAQC,IAAI,qBACR0C,EAAYG,SACdE,cAAcL,EAAYG,YAG7B,IAEH,IAAMG,EAAUP,EAAMP,OACpB,oCACE,kBAAC,IAAD,CAASe,GAAG,KAAKzB,KAAK,KAAK0B,WAAW,YAAtC,YAIA,kBAAC,IAAD,CAAMC,QAAS,GAAKC,SAAS,KAAKC,GAAG,KAArC,gDAGA,kBAAC,IAAD,CAAMD,SAAS,OACVX,EAAMJ,cACP,kBAAC,IAAD,CAAWiB,KAAMb,EAAMJ,cAAekB,aAAa,EAAMC,YAAa,GACpE,kBAAC,EAAD,OAGF,cAIJ,kBAAC,IAAD,CAAQH,GAAG,IAAI/B,QAASxC,GACtB,kBAAC,IAAD,CAAO2E,IAAKC,IAAaC,MAAM,WAGjC,kBAAC,IAAD,CAASC,GAAI,KACb,kBAAC,IAAD,CAAMR,SAAS,OAAf,qBACoB,kBAAC,IAAD,CAAMH,GAAI,KAAMR,EAAMN,UAAtB,SAEpB,kBAAC,IAAD,CAAMiB,SAAS,MAAf,WAA6BX,EAAMV,QACnC,kBAAC,IAAD,CAAQsB,GAAI,EAAG/B,QAASR,EAAcS,YAAY,OAAOC,KAAK,MAA9D,YAKF,kBAAC,IAAD,CAAKoC,GAAI,IAAT,cAGF,OACE,kBAAC,IAAD,CAAKC,GAAI,IACP,kBAAC,IAAD,CAAKZ,GAAG,UAAUa,GAAI,GAAIC,GAAI,IAC5B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,KAAK,KAAKC,GAAG,OAAOC,UAAU,UAChClB,O,kBCtHPmB,EAAU,SAAC5F,EAAc6F,GAC7B,OACE,kBAAC,IAAD,CAAMC,KAAMD,EAAME,YAAU,GACzB/F,IAKDgG,EAA0BJ,EAAQ,SAAU,gCAC5CK,EAA2BL,EAAQ,UAAW,4BAC9CM,EAAgCN,EAAQ,sBAAuB,uCAuFtDO,EArFS,WACtB,IAAMC,EAAW,CACf,CACEC,MAAO,oBACPC,YACE,+LAGE,kBAAC,IAAD,KACE,kBAAC,IAAD,qBAAwBnH,IAAxB,yCACA,kBAAC,IAAD,yDACA,kBAAC,IAAD,uBHrBgC,IGqBhC,kCANJ,qIAUE,kBAAC,IAAD,KACE,kBAAC,IAAD,kCAC6BA,IAD7B,mDAC2G,IH3B3E,IG0BhC,oBAIA,kBAAC,IAAD,kDAC6CA,EAA2B,GADxE,2DH9BgC,IG8BhC,wBAIA,kBAAC,IAAD,oDAC+CA,EAA2B,GAD1E,2DHlCgC,IGkChC,wBAIA,kBAAC,IAAD,gDHtCgC,IGsChC,cACA,kBAAC,IAAD,iCAC4BA,EAA2B,GADvD,sEAQR,CACEkH,MAAO,gBACPC,YACE,wIAC0FJ,EAD1F,4NAIE,kBAAC,IAAD,KACE,kBAAC,IAAD,iJAEoCF,EAFpC,QAEqDC,EAFrD,KAIA,kBAAC,IAAD,+HAGE,kBAAC,IAAD,KACE,kBAAC,IAAD,wGAGA,kBAAC,IAAD,qIAMJ,kBAAC,IAAD,qHAQV,OACE,kBAAC,IAAD,CAAKM,GAAG,WAAWC,GAAI,IACpBJ,EAASK,KAAI,SAACC,EAAIC,GAAL,OACZ,0BAAMC,IAAKD,GACE,IAAVA,EAAc,kBAAC,IAAD,CAAStB,GAAI,KAAS,GACrC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAASC,GAAI,GAAIoB,EAAGL,OACnBK,EAAGJ,mB,SC7EVO,EACJ,iDAEE,6BACA,kBAAC,IAAD,CAAO3B,IAAI,iDAAiD4B,QAAQ,SAIlElB,EAAU,SAAC5F,EAAc6F,GAC7B,OACE,kBAAC,IAAD,CAAMC,KAAMD,EAAME,YAAU,GACzB/F,IAKD+G,EAA0BnB,EAAQ,SAAU,sBAC5CoB,GAAkCpB,EAAQ,kBAAmB,wCAE7DqB,GAAO,CACX,CACEZ,MAAM,sBACNC,YAAY,oGAEd,CACED,MAAM,0BACNC,YAAa,gFAA4CS,EAA5C,kCAEf,CACEV,MAAM,yCACNC,YAAY,8EAAD,OAAgFnH,IAAhF,8HAEb,CACEkH,MAAM,8BACNC,YACE,0JAGE,6BACA,6BAJF,kNAUJ,CACED,MAAM,oDACNC,YACE,wIACoG,IACjGU,KAIP,CACEX,MAAM,2CACNC,YAAY,qMAEd,CACED,MAAM,kCACNC,YAAY,kFAEd,CACED,MAAM,8FACNC,YAAY,iKAEd,CACED,MAAM,iDACNC,YAAY,wHAEd,CACED,MAAM,8CACNC,YAAaO,GAEf,CACER,MAAM,uBAAD,OAAyBlH,IAAzB,KACLmH,YAAY,gEAAD,OAAkEnH,IAAlE,MAEb,CACEkH,MAAM,uBAAD,OAAyBlH,IAAzB,KACLmH,YAAY,gEAAD,OAAkEnH,IAAlE,MAEb,CACEkH,MAAM,uBACNC,YAAY,yQA6BDY,GAzBO,kBACpB,kBAAC,IAAD,CAAKxC,GAAG,UAAU8B,GAAI,IACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKf,KAAK,SAASC,GAAG,QACpB,kBAAC,IAAD,CAASJ,GAAI,GAAb,QACA,kBAAC,IAAD,CAAW6B,aAAW,GACnBF,GAAKR,KAAI,SAACW,EAAKT,GACd,OACE,kBAAC,IAAD,CAAeC,IAAKD,GAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKU,KAAK,IAAI1B,UAAU,QACrByB,EAAIf,OAEP,kBAAC,IAAD,OAEF,kBAAC,IAAD,CAAgBb,GAAI,GAAI4B,EAAId,sB,gFChHtCgB,GAAO,CACXC,KAAM,CACJ,CAAE1B,KAAM,uCAAwC7F,KAAM,WAAYwH,KAAM,kBAAC,KAAD,OACxE,CAAE3B,KAAM,uCAAwC7F,KAAM,WAAYwH,KAAM,kBAAC,KAAD,QAE1EC,OAAQ,CAAC,CAAE5B,KAAM,gCAAiC7F,KAAM,UAAWwH,KAAM,kBAAC,KAAD,QACzEE,QAAS,CAAC,CAAE7B,KAAM,sBAAuB7F,KAAM,QAASwH,KAAM,kBAAC,KAAD,SAwEjDG,GArEU,WAAO,IACtBC,EAAcC,0BAAdD,UAGR,OAFApG,QAAQC,IAAI,YAAamG,GAGvB,kBAAC,IAAD,CAAKlD,GAAG,SAAS6B,GAAG,WAAWC,GAAI,GAAIsB,GAAI,GACzC,kBAAC,IAAD,CAAKrC,KAAK,SAASC,GAAG,QACpB,kBAAC,KAAD,CAAMqC,KAAK,OAAOC,QAAQ,UACxB,kBAAC,KAAD,CAAOrC,UAAU,SAASN,GAAI,EAAG4C,EAAG,CAAC,OAAQ,MAAO,QAClD,kBAAC,IAAD,CAAMtD,WAAW,OAAjB,QACC2C,GAAKC,KAAKd,KAAI,SAACyB,EAAMvB,GAAP,OACb,kBAAC,IAAD,CAAMb,KAAMoC,EAAKrC,KAAMe,IAAKD,EAAOZ,YAAU,EAACoC,OAAQ,CAAEC,eAAgB,SACtE,kBAAC,IAAD,CAAQC,QAAQ,QAAQC,SAAUJ,EAAKV,KAAMe,MAAM,YAChDL,EAAKlI,WAKd,kBAAC,KAAD,CAAO2F,UAAU,SAASN,GAAI,EAAG4C,EAAG,CAAC,OAAQ,MAAO,QAClD,kBAAC,IAAD,CAAMtD,WAAW,OAAjB,UACC2C,GAAKG,OAAOhB,KAAI,SAACyB,EAAMvB,GAAP,OACf,kBAAC,IAAD,CAAMb,KAAMoC,EAAKrC,KAAMe,IAAKD,EAAOZ,YAAU,EAACoC,OAAQ,CAAEC,eAAgB,SACtE,kBAAC,IAAD,CAAQC,QAAQ,QAAQC,SAAUJ,EAAKV,KAAMe,MAAM,YAChDL,EAAKlI,WAKd,kBAAC,KAAD,CAAO2F,UAAU,SAASN,GAAI,EAAG4C,EAAG,CAAC,OAAQ,MAAO,QAClD,kBAAC,IAAD,CAAMtD,WAAW,OAAjB,WACC2C,GAAKI,QAAQjB,KAAI,SAACyB,EAAMvB,GAAP,OAChB,kBAAC,IAAD,CAAMb,KAAMoC,EAAKrC,KAAMe,IAAKD,EAAOZ,YAAU,EAACoC,OAAQ,CAAEC,eAAgB,SACtE,kBAAC,IAAD,CAAQC,QAAQ,QAAQC,SAAUJ,EAAKV,KAAMe,MAAM,YAChDL,EAAKlI,YAMhB,kBAAC,IAAD,CAASwI,YAAY,WAAWnD,GAAI,IACpC,kBAAC,IAAD,KACE,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAMS,KAAK,qBAAqBC,YAAU,GACxC,kBAAC,IAAD,CAAOb,IAAKuD,KAAQrD,MAAM,WAE5B,kBAAC,IAAD,CAAMU,KAAK,2BAA2BC,YAAU,GAC9C,kBAAC,IAAD,CAAOb,IAAKwD,KAAQtD,MAAM,aAIhC,kBAAC,IAAD,CAASoD,YAAY,WAAWnD,GAAI,IACpC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMR,SAAS,MACb,kBAAC,IAAD,CAAMH,GAAG,KAAT,cADF,mHAIA,kBAAC,IAAD,CAAMG,SAAS,MAAf,od,UC7CK8D,G,uKAdX,OACE,kBAAC,kBAAD,CAAgBC,MAAOA,KACrB,kBAAC,KAAD,MACA,kBAAC,KAAD,CAAOC,KAAK,QACV,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,GAAD,OAEF,kBAAC,GAAD,W,GAVUC,IAAMC,WCAJC,QACW,cAA7BxG,OAAOyG,SAASC,UAEe,UAA7B1G,OAAOyG,SAASC,UAEhB1G,OAAOyG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxI,QAAQwI,MAAMA,EAAMC,c","file":"static/js/main.485e578a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tzbutton-logo.0ebfeaf6.svg\";","module.exports = __webpack_public_path__ + \"static/media/beacon-logo.944018ec.svg\";","module.exports = __webpack_public_path__ + \"static/media/airgap-logo.38eff924.svg\";","import { BigNumber } from 'bignumber.js';\n\nexport const TZBUTTON_CONTRACT: string = 'KT1Pbf3jrwvYLjwyzjKzhgtJURzfXubYfMQn';\nexport const TZBUTTON_AMOUNT_MUTEZ: string = '200000';\n\nexport const XTZ_STRING = 'XTZ';\n\nexport const NUMBER_OF_BLOCKS_TO_WIN: 256 = 256;\n\nexport const RPC_URL = 'https://api.tez.ie/rpc/carthagenet';\n\nexport const CONTRIBUTION_AMOUNT_STRING = (multiplier: number = 1) => {\n  return `${new BigNumber(TZBUTTON_AMOUNT_MUTEZ).shiftedBy(-6).times(multiplier).toFixed()} ${XTZ_STRING}`;\n};\n","import { NetworkType } from '@airgap/beacon-sdk';\nimport { BeaconWallet } from '@taquito/beacon-wallet';\nimport { Tezos, OpKind } from '@taquito/taquito';\n\nimport { TZBUTTON_AMOUNT_MUTEZ, TZBUTTON_CONTRACT, RPC_URL } from '../constants';\n\nTezos.setProvider({ rpc: RPC_URL });\n\nconst connectToBeacon = async () => {\n  // Create a new BeaconWallet instance. The options will be passed to the DAppClient constructor.\n  const wallet = new BeaconWallet({ name: 'TzButton' });\n\n  // Setting the wallet as the wallet provider for Taquito.\n  Tezos.setWalletProvider(wallet);\n\n  // Specify the network on which the permissions will be requested.\n  const network = {\n    type: NetworkType.CARTHAGENET,\n  };\n\n  // Send permission request to the connected wallet. This will either be the browser extension, or a wallet over the P2P network.\n  await wallet.requestPermissions({ network });\n\n  return wallet;\n};\n\nexport const participate = async (): Promise<void> => {\n  const wallet = await connectToBeacon();\n\n  await wallet.client.requestOperation({\n    operationDetails: [\n      {\n        kind: 'transaction' as any,\n        amount: TZBUTTON_AMOUNT_MUTEZ,\n        destination: TZBUTTON_CONTRACT,\n      },\n    ],\n  });\n};\n\nexport const withdraw = async (): Promise<string> => {\n  await connectToBeacon();\n\n  // Connect to a specific contract on the tezos blockchain.\n  // Make sure the contract is deployed on the network you requested permissions for.\n  const contract = await Tezos.wallet.at(TZBUTTON_CONTRACT);\n  // Call a method on a contract. In this case, we use the transfer entrypoint.\n  // Taquito will automatically check if the entrypoint exists and if we call it with the right parameters.\n  // In this case the parameters are [from, to, amount].\n  // This will prepare the contract call and send the request to the connected wallet.\n  const result = await contract.methods.withdraw('').send();\n\n  // As soon as the operation is broadcast, you will receive the operation hash\n  return result.opHash;\n};\n\nexport const readStateFromContract = async () => {\n  const contract = await Tezos.contract.at(TZBUTTON_CONTRACT);\n\n  const contractStorage: any = await contract.storage();\n\n  console.log(contractStorage);\n  return contractStorage;\n};\n\nlet lastUpdatedBlockHash: string = '';\n\nexport const checkRecentBlockForUpdates = async () => {\n  console.log('checking for updates');\n  const block = await Tezos.rpc.getBlock();\n\n  const newRelevantBlock =\n    block.hash !== lastUpdatedBlockHash &&\n    block.operations[3].some((ops) =>\n      ops.contents.some((op) => op.kind === OpKind.TRANSACTION && op.destination === TZBUTTON_CONTRACT)\n    );\n\n  lastUpdatedBlockHash = block.hash;\n\n  return newRelevantBlock;\n};\n\nexport const openTezBlock = async () => {\n  window.open(`https://carthagenet.tezblock.io/account/${TZBUTTON_CONTRACT}`, '_blank');\n};\n\nexport const getPotAmount = async () => {\n  return (await Tezos.tz.getBalance(TZBUTTON_CONTRACT)).shiftedBy(-6).toString();\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport Countdown from 'react-countdown';\nimport { Image, Square, Box, Divider, Text, Container, Button, Heading } from '@chakra-ui/core';\n\nimport {\n  getPotAmount,\n  checkRecentBlockForUpdates,\n  readStateFromContract,\n  participate,\n  withdraw,\n  openTezBlock,\n} from '../../services/beacon-service';\nimport { NUMBER_OF_BLOCKS_TO_WIN } from '../../constants';\n\nimport TzButtonSvg from '../../logos/tzbutton-logo.svg';\n\nconst WinnerAnnouncement = () => (\n  <span>\n    The game is over!\n    <br />\n    <Button onClick={withdraw} colorScheme=\"green\" size=\"sm\">\n      Withdraw\n    </Button>\n  </span>\n);\n\nconst getTargetTime = (start: Date) => {\n  const end = new Date(start.getTime() + NUMBER_OF_BLOCKS_TO_WIN * 60 * 1000);\n\n  return end;\n};\n\ninterface AppState {\n  loaded: boolean;\n  potAmount: string;\n  leader: string;\n  leaderStartTime: Date | undefined;\n  leaderEndTime: Date | undefined;\n}\n\nconst refreshContractState = async (setState: React.Dispatch<React.SetStateAction<AppState>>) => {\n  console.log('refreshing');\n  const contractState = await readStateFromContract();\n  const startDate = new Date(contractState.leadership_start_timestamp);\n  setState({\n    loaded: true,\n    potAmount: await getPotAmount(),\n    leader: contractState.leader,\n    leaderStartTime: startDate,\n    leaderEndTime: getTargetTime(startDate),\n  });\n};\n\nconst Header: React.FC = () => {\n  const [state, setState] = useState<AppState>({\n    loaded: false,\n    potAmount: '',\n    leader: '',\n    leaderStartTime: undefined,\n    leaderEndTime: undefined,\n  });\n\n  const intervalRef = useRef<undefined | NodeJS.Timeout>();\n\n  useEffect(() => {\n    console.log('setting up interval');\n\n    refreshContractState(setState);\n    intervalRef.current = setInterval(async () => {\n      const hasUpdates = await checkRecentBlockForUpdates();\n      if (hasUpdates) {\n        refreshContractState(setState);\n      }\n    }, 10 * 1000);\n    return () => {\n      console.log('removing interval');\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  const content = state.loaded ? (\n    <>\n      <Heading as=\"h1\" size=\"xl\" fontWeight=\"semibold\">\n        TzButton\n      </Heading>\n\n      <Text opacity={0.7} fontSize=\"xl\" mt=\"6\">\n        A social experiment on the Tezos blockchain.\n      </Text>\n      <Text fontSize=\"6xl\">\n        {!!state.leaderEndTime ? (\n          <Countdown date={state.leaderEndTime} daysInHours={true} zeroPadTime={2}>\n            <WinnerAnnouncement />\n          </Countdown>\n        ) : (\n          'Loading...'\n        )}\n      </Text>\n\n      <Square mt=\"6\" onClick={participate}>\n        <Image src={TzButtonSvg} width=\"200px\"></Image>\n      </Square>\n\n      <Divider my={16} />\n      <Text fontSize=\"3xl\">\n        Contract Balance: <Text as={'b'}>{state.potAmount} XTZ</Text>\n      </Text>\n      <Text fontSize=\"xl\">Leader: {state.leader}</Text>\n      <Button mt={8} onClick={openTezBlock} colorScheme=\"blue\" size=\"sm\">\n        History\n      </Button>\n    </>\n  ) : (\n    <Box my={50}>Loading...</Box>\n  );\n\n  return (\n    <Box mb={20}>\n      <Box as=\"section\" pt={24} pb={16}>\n        <Container>\n          <Box maxW=\"xl\" mx=\"auto\" textAlign=\"center\">\n            {content}\n          </Box>\n        </Container>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { OrderedList, ListItem, UnorderedList, Box, Heading, Divider, Link, Container } from '@chakra-ui/core';\n\nimport { NUMBER_OF_BLOCKS_TO_WIN, CONTRIBUTION_AMOUNT_STRING } from '../../constants';\n\nconst getLink = (name: string, link: string) => {\n  return (\n    <Link href={link} isExternal>\n      {name}\n    </Link>\n  );\n};\n\nconst beaconLink: JSX.Element = getLink('Beacon', 'https://www.walletbeacon.io/');\nconst taquitoLink: JSX.Element = getLink('Taquito', 'https://tezostaquito.io/');\nconst buttonRedditLink: JSX.Element = getLink('Reddit \"The Button\"', 'https://www.reddit.com/r/thebutton/');\n\nconst HowTo: React.FC = () => {\n  const elements = [\n    {\n      title: 'How does it work?',\n      description: (\n        <>\n          The TZButton experiment is controlled by a smart contract deployed on the Tezos blockchain. Whenever anyone\n          presses the button three things will happen:\n          <OrderedList>\n            <ListItem>You will add {CONTRIBUTION_AMOUNT_STRING()} to the smart contract’s balance</ListItem>\n            <ListItem>The address of the sender will become the leader</ListItem>\n            <ListItem>A countdown of {NUMBER_OF_BLOCKS_TO_WIN} minutes is reset and started</ListItem>\n          </OrderedList>\n          The address that is set after the countdown expired will be eligible to withdraw the total balance on the\n          smart contract. Example:\n          <OrderedList>\n            <ListItem>\n              Alice presses the button, {CONTRIBUTION_AMOUNT_STRING()} are now on the smart contract, the countdown of{' '}\n              {NUMBER_OF_BLOCKS_TO_WIN} minutes starts.\n            </ListItem>\n            <ListItem>\n              After 200 minutes Bob presses the button, {CONTRIBUTION_AMOUNT_STRING(2)} are now on the smart contract,\n              the countdown resets to {NUMBER_OF_BLOCKS_TO_WIN} minutes and starts.\n            </ListItem>\n            <ListItem>\n              After 5 minutes Charlie presses the button, {CONTRIBUTION_AMOUNT_STRING(3)} are now on the smart contract,\n              the countdown resets to {NUMBER_OF_BLOCKS_TO_WIN} minutes and starts.\n            </ListItem>\n            <ListItem>No one presses the button for more than {NUMBER_OF_BLOCKS_TO_WIN} minutes. </ListItem>\n            <ListItem>\n              Charlie can now withdraw {CONTRIBUTION_AMOUNT_STRING(3)}, because he was the last leader and his countdown\n              has expired.\n            </ListItem>\n          </OrderedList>\n        </>\n      ),\n    },\n    {\n      title: 'Why TzButton?',\n      description: (\n        <>\n          The experiment was inspired by “the Button” (an experiment conducted with Reddit users {buttonRedditLink}).\n          Besides the fact that the behavior of the participating users will be automatically recorded on the blockchain\n          and analyzed + published on this site, there are also other reasons why this experiment is interesting:\n          <UnorderedList>\n            <ListItem>\n              It showcases how easy it is for dApps to interact securely with the Tezos blockchain using the existing\n              libraries in the ecosystem (like {beaconLink} and {taquitoLink})\n            </ListItem>\n            <ListItem>\n              It sets an incentive for security engineers to try to break and exploit the smart contract. This could\n              mean two things:\n              <OrderedList>\n                <ListItem>\n                  The contract and tooling used is secure and can be used as a reference for future applications.\n                </ListItem>\n                <ListItem>\n                  A breach would be transparent and recorded on the blockchain, meaning the entire community would be\n                  able to learn from it.\n                </ListItem>\n              </OrderedList>\n            </ListItem>\n            <ListItem>\n              It provides to the community an open source boilerplate/project to create dApps on the Tezos Blockchain.\n            </ListItem>\n          </UnorderedList>\n        </>\n      ),\n    },\n  ];\n  return (\n    <Box bg=\"gray.100\" py={16}>\n      {elements.map((el, index) => (\n        <span key={index}>\n          {index !== 0 ? <Divider my={16} /> : ''}\n          <Container>\n            <Heading mb={4}>{el.title}</Heading>\n            {el.description}\n          </Container>\n        </span>\n      ))}\n    </Box>\n  );\n};\n\nexport default HowTo;\n","import React from 'react';\n\nimport {\n  Link,\n  Heading,\n  Image,\n  Box,\n  Container,\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  AccordionIcon,\n} from '@chakra-ui/core';\n\nimport { CONTRIBUTION_AMOUNT_STRING } from '../../constants';\n\nconst catImage = (\n  <>\n    There are:\n    <br />\n    <Image src=\"https://source.unsplash.com/collection/139386/\" boxSize=\"200\"></Image>\n  </>\n);\n\nconst getLink = (name: string, link: string) => {\n  return (\n    <Link href={link} isExternal>\n      {name}\n    </Link>\n  );\n};\n\nconst airgapLink: JSX.Element = getLink('AirGap', 'https://airgap.it/');\nconst tzButtonGithubLink: JSX.Element = getLink('TzButton GitHub', 'https://github.com/tzbutton/tzbutton');\n\nconst FAQs = [\n  {\n    title: `Are there any fees?`,\n    description: `The only fees that are required are the transaction fees (gas cost to execute your transaction).`,\n  },\n  {\n    title: `Who developed TZButton?`,\n    description: <>TZButton was developed by members of the {airgapLink} team during their free time.</>,\n  },\n  {\n    title: `Can I press the button multiple times?`,\n    description: `Yes. Just keep in mind that every time the button is pressed, you will add ${CONTRIBUTION_AMOUNT_STRING()} to the balance and the countdown will be reset. So it does not make any sense to press it if you already are the leader.`,\n  },\n  {\n    title: `How is this project funded?`,\n    description: (\n      <>\n        This project was created on a voluntary basis during our free time. We don't have any direct commercial\n        motivation.\n        <br />\n        <br />\n        The only thing that could be considered as a commercial motivation is that the contracts balance is delegated to\n        the AirGap baker. All resulting baking rewards will be used to support open source software.\n      </>\n    ),\n  },\n  {\n    title: `Where can I find the source code of this project?`,\n    description: (\n      <>\n        The entire project is released using the permissive MIT license, you can find the code on github:{' '}\n        {tzButtonGithubLink}\n      </>\n    ),\n  },\n  {\n    title: `How can I participate in the experiment?`,\n    description: `In case you already have a beacon compatible wallet, you just have to press the button. In case you don't have a beacon compatible wallet yet, here are some guide how to set up one: coming soon`,\n  },\n  {\n    title: `How can I withdraw the balance?`,\n    description: `When the countdown expires the current button will become the withdraw button.`,\n  },\n  {\n    title: `If I'm the leader and the countdown expires, how quickly do I need to withdraw the balance?`,\n    description: `No rush. You can take all the time you need, no one will be able to overwrite your leader position and you are the only one capable of withdrawing the funds.`,\n  },\n  {\n    title: `Can't the contract owner withdraw the balance?`,\n    description: `No. The contract does not have such a function. Only the leader can withdraw the balance once the countdown expired.`,\n  },\n  {\n    title: `Why are there no cat pictures on this site?`,\n    description: catImage,\n  },\n  {\n    title: `Can I pay more than ${CONTRIBUTION_AMOUNT_STRING()}?`,\n    description: `No, the contract will not allow you to pay more or less than ${CONTRIBUTION_AMOUNT_STRING()}.`,\n  },\n  {\n    title: `Can I pay less than ${CONTRIBUTION_AMOUNT_STRING()}?`,\n    description: `No, the contract will not allow you to pay more or less than ${CONTRIBUTION_AMOUNT_STRING()}.`,\n  },\n  {\n    title: `Is this dApp secure?`,\n    description: `We've put in a lot of effort to make it as easy and secure as possible (and our team is dedicated to security). It is an experiment and it should be dealt with that way. Don't participate if you cannot afford to lose the 0.2 TZ you are sending to the contract.`,\n  },\n];\n\nconst Faq: React.FC = () => (\n  <Box as=\"section\" py={16}>\n    <Container>\n      <Box maxW=\"1000px\" mx=\"auto\">\n        <Heading mb={4}>FAQs</Heading>\n        <Accordion allowToggle>\n          {FAQs.map((faq, index) => {\n            return (\n              <AccordionItem key={index}>\n                <AccordionButton>\n                  <Box flex=\"1\" textAlign=\"left\">\n                    {faq.title}\n                  </Box>\n                  <AccordionIcon />\n                </AccordionButton>\n                <AccordionPanel pb={4}>{faq.description}</AccordionPanel>\n              </AccordionItem>\n            );\n          })}\n        </Accordion>\n      </Box>\n    </Container>\n  </Box>\n);\n\nexport default Faq;\n","import React from 'react';\nimport { FaGithub, FaEnvelope, FaTwitter } from 'react-icons/fa';\n\nimport { HStack, Container, Box, Flex, Button, Text, Stack, Link, Divider, Image, useColorMode } from '@chakra-ui/core';\n\nimport Beacon from '../../logos/beacon-logo.svg';\nimport AirGap from '../../logos/airgap-logo.svg';\n\nconst data = {\n  code: [\n    { link: 'https://github.com/tzbutton/tzbutton', name: 'Frontend', icon: <FaGithub /> },\n    { link: 'https://github.com/tzbutton/tzbutton', name: 'Contract', icon: <FaGithub /> },\n  ],\n  social: [{ link: 'https://twitter.com/airgap_it', name: 'Twitter', icon: <FaTwitter /> }],\n  contact: [{ link: 'mailto:hi@airgap.it', name: 'Email', icon: <FaEnvelope /> }],\n};\n\nconst Footer: React.FC = () => {\n  const { colorMode } = useColorMode();\n  console.log('colorMode', colorMode);\n\n  return (\n    <Box as=\"footer\" bg=\"gray.100\" py={10} px={8}>\n      <Box maxW=\"1000px\" mx=\"auto\">\n        <Flex wrap=\"wrap\" justify=\"center\">\n          <Stack textAlign=\"center\" my={4} w={['100%', '50%', '33%']}>\n            <Text fontWeight=\"900\">Code</Text>\n            {data.code.map((item, index) => (\n              <Link href={item.link} key={index} isExternal _hover={{ textDecoration: 'none' }}>\n                <Button variant=\"ghost\" leftIcon={item.icon} color=\"gray.500\">\n                  {item.name}\n                </Button>\n              </Link>\n            ))}\n          </Stack>\n          <Stack textAlign=\"center\" my={4} w={['100%', '50%', '33%']}>\n            <Text fontWeight=\"900\">Social</Text>\n            {data.social.map((item, index) => (\n              <Link href={item.link} key={index} isExternal _hover={{ textDecoration: 'none' }}>\n                <Button variant=\"ghost\" leftIcon={item.icon} color=\"gray.500\">\n                  {item.name}\n                </Button>\n              </Link>\n            ))}\n          </Stack>\n          <Stack textAlign=\"center\" my={4} w={['100%', '50%', '33%']}>\n            <Text fontWeight=\"900\">Contact</Text>\n            {data.contact.map((item, index) => (\n              <Link href={item.link} key={index} isExternal _hover={{ textDecoration: 'none' }}>\n                <Button variant=\"ghost\" leftIcon={item.icon} color=\"gray.500\">\n                  {item.name}\n                </Button>\n              </Link>\n            ))}\n          </Stack>\n        </Flex>\n        <Divider borderColor=\"gray.300\" my={4} />\n        <Container>\n          <HStack>\n            <Link href=\"https://airgap.it/\" isExternal>\n              <Image src={AirGap} width=\"150px\"></Image>\n            </Link>\n            <Link href=\"https://walletbeacon.io/\" isExternal>\n              <Image src={Beacon} width=\"150px\"></Image>\n            </Link>\n          </HStack>\n        </Container>\n        <Divider borderColor=\"gray.300\" my={4} />\n        <Container>\n          <Text fontSize=\"xs\">\n            <Text as=\"b\">Disclaimer</Text>: This is an experiment, consider the funds you send to the contract as lost.\n            No one forces you to participate.\n          </Text>\n          <Text fontSize=\"xs\">\n            THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT\n            LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\n            EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\n            AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\n            OR OTHER DEALINGS IN THE SOFTWARE.\n          </Text>\n        </Container>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport theme from '@chakra-ui/theme';\n\nimport Header from './components/Header/Header';\nimport HowTo from './components/HowTo/HowTo';\nimport Faq from './components/Faq/Faq';\nimport Footer from './components/Footer/Footer';\n\nimport { Stack, ChakraProvider, CSSReset } from '@chakra-ui/core';\n\n// Use at the root of your app\nclass App extends React.Component<{}> {\n  render() {\n    return (\n      <ChakraProvider theme={theme}>\n        <CSSReset />\n        <Stack minH=\"90vh\">\n          <Header></Header>\n          <HowTo></HowTo>\n          <Faq></Faq>\n        </Stack>\n        <Footer />\n      </ChakraProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
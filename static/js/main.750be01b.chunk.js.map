{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["TZBUTTON_CONTRACT","Tezos","setProvider","rpc","connectToBeacon","a","wallet","BeaconWallet","name","setWalletProvider","network","type","NetworkType","CARTHAGENET","requestPermissions","participate","client","requestOperation","operationDetails","kind","amount","destination","withdraw","at","contract","methods","send","result","opHash","clickButton","readStateFromContract","storage","contractStorage","console","log","lastUpdatedBlockHash","checkRecentBlockForUpdates","getBlock","block","newRelevantBlock","hash","operations","some","ops","contents","op","OpKind","TRANSACTION","openTezBlock","window","open","App","props","refreshContractState","contractState","startDate","Date","leadership_start_timestamp","tz","getBalance","shiftedBy","toString","leader","getTargetTime","loaded","potAmount","leaderStartTime","leaderEndTime","setState","componentDidMount","componentWillUnmount","start","getTime","NUMBER_OF_BLOCKS_TO_WIN","state","undefined","setInterval","WinnerAnnouncement","onClick","colorScheme","size","page","this","color","height","fontSize","date","daysInHours","zeroPadTime","theme","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.750be01b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport theme from \"@chakra-ui/theme\";\n\nimport {\n  ChakraProvider,\n  CSSReset,\n  Flex,\n  Square,\n  Text,\n  Container,\n  Button,\n} from \"@chakra-ui/core\";\nimport { NetworkType } from \"@airgap/beacon-sdk\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport { Tezos, OpKind } from \"@taquito/taquito\";\nimport Countdown from \"react-countdown\";\n\nconst TZBUTTON_CONTRACT: string = \"KT1SnLMjynVUHadGFHhFJ76eTnGEuMT6zYVc\";\nconst TZBUTTON_AMOUNT: string = \"200000\";\n\nTezos.setProvider({ rpc: \"https://api.tez.ie/rpc/carthagenet\" });\n\nconst connectToBeacon = async () => {\n  // Create a new BeaconWallet instance. The options will be passed to the DAppClient constructor.\n  const wallet = new BeaconWallet({ name: \"TzButton\" });\n\n  // Setting the wallet as the wallet provider for Taquito.\n  Tezos.setWalletProvider(wallet);\n\n  // Specify the network on which the permissions will be requested.\n  const network = {\n    type: NetworkType.CARTHAGENET,\n  };\n\n  // Send permission request to the connected wallet. This will either be the browser extension, or a wallet over the P2P network.\n  await wallet.requestPermissions({ network });\n\n  return wallet;\n};\n\nconst participate = async (): Promise<void> => {\n  const wallet = await connectToBeacon();\n\n  await wallet.client.requestOperation({\n    operationDetails: [\n      {\n        kind: \"transaction\" as any,\n        amount: TZBUTTON_AMOUNT,\n        destination: TZBUTTON_CONTRACT,\n      },\n    ],\n  });\n};\n\nconst withdraw = async (): Promise<string> => {\n  await connectToBeacon();\n\n  // Connect to a specific contract on the tezos blockchain.\n  // Make sure the contract is deployed on the network you requested permissions for.\n  const contract = await Tezos.wallet.at(TZBUTTON_CONTRACT);\n  // Call a method on a contract. In this case, we use the transfer entrypoint.\n  // Taquito will automatically check if the entrypoint exists and if we call it with the right parameters.\n  // In this case the parameters are [from, to, amount].\n  // This will prepare the contract call and send the request to the connected wallet.\n  const result = await contract.methods.withdraw(\"\").send();\n\n  // As soon as the operation is broadcast, you will receive the operation hash\n  return result.opHash;\n};\n\nasync function clickButton() {\n  // Call the contract\n  await participate();\n}\n\nasync function readStateFromContract() {\n  const contract = await Tezos.contract.at(TZBUTTON_CONTRACT);\n\n  const contractStorage: any = await contract.storage();\n\n  console.log(contractStorage);\n  return contractStorage;\n}\n\ninterface AppState {\n  loaded: boolean;\n  potAmount: string;\n  leader: string;\n  leaderStartTime: Date | undefined;\n  leaderEndTime: Date | undefined;\n}\n\nconst NUMBER_OF_BLOCKS_TO_WIN: 256 = 256;\n\nlet lastUpdatedBlockHash: string = \"\";\n\nconst checkRecentBlockForUpdates = async () => {\n  console.log(\"checking for updates\");\n  const block = await Tezos.rpc.getBlock();\n\n  const newRelevantBlock =\n    block.hash !== lastUpdatedBlockHash &&\n    block.operations[3].some((ops) =>\n      ops.contents.some(\n        (op) =>\n          op.kind === OpKind.TRANSACTION && op.destination === TZBUTTON_CONTRACT\n      )\n    );\n\n  lastUpdatedBlockHash = block.hash;\n\n  return newRelevantBlock;\n};\n\nconst openTezBlock = async () => {\n  window.open(\n    `https://carthagenet.tezblock.io/account/${TZBUTTON_CONTRACT}`,\n    \"_blank\"\n  );\n};\n\n// Use at the root of your app\nclass App extends React.Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      loaded: false,\n      potAmount: \"\",\n      leader: \"\",\n      leaderStartTime: undefined,\n      leaderEndTime: undefined,\n    };\n\n    setInterval(async () => {\n      const hasUpdates = await checkRecentBlockForUpdates();\n      if (hasUpdates) {\n        this.refreshContractState();\n      }\n    }, 10 * 1000);\n  }\n\n  refreshContractState = async () => {\n    console.log(\"refreshing\");\n    const contractState = await readStateFromContract();\n    const startDate = new Date(contractState.leadership_start_timestamp);\n    this.setState({\n      loaded: true,\n      potAmount: (await Tezos.tz.getBalance(TZBUTTON_CONTRACT))\n        .shiftedBy(-6)\n        .toString(),\n      leader: contractState.leader,\n      leaderStartTime: startDate,\n      leaderEndTime: this.getTargetTime(startDate),\n    });\n  };\n\n  componentDidMount = async () => {\n    this.refreshContractState();\n  };\n\n  componentWillUnmount = async () => {\n    console.log(\"unmounting\");\n  };\n\n  getTargetTime = (start: Date) => {\n    const end = new Date(start.getTime() + NUMBER_OF_BLOCKS_TO_WIN * 60 * 1000);\n\n    return end;\n  };\n\n  render() {\n    const WinnerAnnouncement = () => (\n      <span>\n        The game is over!\n        <br />\n        <Button onClick={withdraw} colorScheme=\"green\" size=\"sm\">\n          Withdraw\n        </Button>\n      </span>\n    );\n\n    const page = this.state.loaded ? (\n      <Flex color=\"black\">\n        <Container height=\"500px\">\n          <br />\n          <br />\n          <br />\n          <Square>\n            <Text>TzButton</Text>\n          </Square>\n          <br />\n          <Square>\n            <Text fontSize=\"6xl\">\n              {!!this.state.leaderEndTime ? (\n                <Countdown\n                  date={this.state.leaderEndTime}\n                  daysInHours={true}\n                  zeroPadTime={2}\n                >\n                  <WinnerAnnouncement />\n                </Countdown>\n              ) : (\n                \"Loading...\"\n              )}\n            </Text>\n          </Square>\n          <br />\n          <Square>\n            <Text fontSize=\"3xl\">Price: {this.state.potAmount} XTZ</Text>\n          </Square>\n          <br />\n          <Square>\n            <Text fontSize=\"xl\">Leader: {this.state.leader}</Text>\n          </Square>\n          <br />\n          <Square>\n            <Button onClick={clickButton} colorScheme=\"green\" size=\"lg\">\n              Button\n            </Button>\n          </Square>\n          <br />\n          <br />\n          Leadership start time: {this.state.leaderStartTime?.toString()}\n          <br />\n          <Square>\n            <Button onClick={openTezBlock} colorScheme=\"green\" size=\"sm\">\n              History\n            </Button>\n          </Square>\n        </Container>\n      </Flex>\n    ) : (\n      \"Loading...\"\n    );\n    return (\n      <ChakraProvider theme={theme}>\n        <CSSReset />\n        <>{page}</>\n      </ChakraProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}